name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    
permissions:
  pull-requests: write
  issues: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate PR Title and Description
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const prTitle = pullRequest.title;
            const prBody = pullRequest.body || '';

            let errors = [];

            const titleRegex = /^(feature|bugfix|hotfix|chore)\/issue-\d+-[a-z0-9-]+$/;
            if (!titleRegex.test(prTitle)) {
              errors.push(`‚ùå PR title "${prTitle}" does not match required format: feature/issue-16-loan-product-configuration`);
              errors.push('   Valid prefixes: feature, bugfix, hotfix, chore');
              errors.push('   Format: <prefix>/issue-<number>-<description-with-hyphens>');
            }

            if (prBody.trim().length < 100) {
              errors.push(`‚ùå PR description is too short (${prBody.trim().length} characters). Minimum required: 100 characters`);
              errors.push('   Please provide a detailed description of the changes made.');
            }

            const allComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = allComments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('PR Validation Failed')
            );

            if (errors.length > 0) {
              const errorMessage = errors.join('\n');

              const commentBody = [
                '## ‚ùå PR Validation Failed',
                errorMessage,
                '',
                '### Requirements:',
                '- **PR Title Format**: `<prefix>/issue-<number>-<description>`',
                '  - Valid prefixes: `feature`, `bugfix`, `hotfix`, `chore`',
                '  - Example: `feature/issue-16-loan-product-configuration`',
                '- **PR Description**: Minimum 100 characters describing the changes made',
                '',
                'Please update your PR title and/or description to meet these requirements.'
              ].join('\n');

              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody,
                });
              }

              core.setFailed('PR validation failed. Check the requirements above.');
            } else {
              if (existingComment) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                });
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '## ‚úÖ PR Validation Passed\n\nYour PR title and description meet all requirements. Great job! üéâ',
              });
            }
