@model LoanManagementApp.DTOs.NotificationTemplateDto
@using LoanApplicationService.Web.Helpers
@{
    ViewData["Title"] = "Edit Notification Template";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Edit Notification Template @Model.TemplateId</h1>
<div class="mb-4">
    <h4>Current Template </h4>
    <table class="table table-bordered w-auto">
        <tr>
            <th>Notification Type</th>
            <td>@NotificationHelper.GetChannelDisplayName(Model.NotificationHeader)</td>
        </tr>
        <tr>
            <th>Channel</th>
            <td>@NotificationHelper.GetChannelDisplayName(Model.Channel)</td>
        </tr>
        <tr>
            <th>Subject</th>
            <td>@Model.Subject</td>
        </tr>
        <tr>
            <th>Body Text</th>
            <td>@Model.BodyText</td>
        </tr>
    </table>
</div>
<form id="editTemplateForm">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <input type="hidden" asp-for="TemplateId" id="templateId" />
    <div class="mb-3">
        <label asp-for="NotificationHeader" class="form-label">Notification Header</label>
        <select asp-for="NotificationHeader" class="form-control" id="notificationHeader" required>
            <option value="">-- Select Notification Header --</option>
            @foreach (var option in NotificationHelper.GetNotificationHeaderOptions(Model.NotificationHeader))
            {
                <option value="@option.Value" @(option.Selected ? "selected" : "")>@option.Text</option>
            }
        </select>
        <span asp-validation-for="NotificationHeader" class="text-danger"></span>
    </div>
    <div class="mb-3"> 
        <label asp-for="Channel" class="form-label">Channel</label>
        <select asp-for="Channel" class="form-control" id="channel" required>
            <option value="">-- Select Channel --</option>
            @foreach (var option in NotificationHelper.GetChannelOptions(Model.Channel))
            {
                <option value="@option.Value" @(option.Selected ? "selected" : "")>@option.Text</option>
            }
        </select>
        <span asp-validation-for="Channel" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Subject" class="form-label">Subject</label>
        <input asp-for="Subject" class="form-control" id="subject" required />
        <span asp-validation-for="Subject" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="BodyText" class="form-label">Body Text</label>
        <textarea asp-for="BodyText" class="form-control" id="bodyText" required></textarea>
        <span asp-validation-for="BodyText" class="text-danger"></span>
    </div>
    <button type="button" class="btn btn-primary" id="editBtn" onclick="updateTemplate()">
        <span id="btnText">Update</span>
        <span id="btnSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
    </button>
    <a href="/NotificationTemplate" class="btn btn-secondary">Cancel</a>
</form>

<div id="alertContainer"></div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alertContainer');
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            alertContainer.innerHTML = alertHtml;
        }

        function setButtonLoading(isLoading) {
            const btn = document.getElementById('editBtn');
            const btnText = document.getElementById('btnText');
            const btnSpinner = document.getElementById('btnSpinner');
            
            if (isLoading) {
                btn.disabled = true;
                btnText.textContent = 'Updating...';
                btnSpinner.classList.remove('d-none');
            } else {
                btn.disabled = false;
                btnText.textContent = 'Update';
                btnSpinner.classList.add('d-none');
            }
        }

        function validateForm() {
            const notificationHeader = document.getElementById('notificationHeader').value.trim();
            const channel = document.getElementById('channel').value;
            const subject = document.getElementById('subject').value.trim();
            const bodyText = document.getElementById('bodyText').value.trim();
            
            let isValid = true;
            let errorMessage = '';
            
            if (!notificationHeader) {
                errorMessage += 'Notification Header is required.\n';
                isValid = false;
            }
            
            if (!channel) {
                errorMessage += 'Channel is required.\n';
                isValid = false;
            }
            
            if (!subject) {
                errorMessage += 'Subject is required.\n';
                isValid = false;
            }
            
            if (!bodyText) {
                errorMessage += 'Body Text is required.\n';
                isValid = false;
            }
            
            if (!isValid) {
                showAlert(errorMessage, 'danger');
            }
            
            return isValid;
        }

        async function updateTemplate() {
            // Clear previous alerts
            document.getElementById('alertContainer').innerHTML = '';
            
            // Validate form
            if (!validateForm()) {
                return;
            }
            
            // Show loading state
            setButtonLoading(true);
            
            try {
                // Get form data
                const formData = {
                    NotificationHeader: document.getElementById('notificationHeader').value.trim(),
                    Channel: document.getElementById('channel').value,
                    Subject: document.getElementById('subject').value.trim(),
                    BodyText: document.getElementById('bodyText').value.trim()
                };
                
                // Get template ID and anti-forgery token
                const templateId = document.getElementById('templateId').value;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                // Make API call
                const response = await fetch(`/NotificationTemplate/Edit/${templateId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(formData)
                });
                
                if (response.ok) {
                    showAlert('Notification template updated successfully!', 'success');
                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = '/NotificationTemplate';
                    }, 1500);
                } else if (response.status === 404) {
                    showAlert('Template not found. It may have been deleted.', 'danger');
                } else {
                    const errorData = await response.text();
                    showAlert(`Error updating template: ${errorData}`, 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('An unexpected error occurred. Please try again.', 'danger');
            } finally {
                setButtonLoading(false);
            }
        }

        // Using form submission with enhanced validation
        function updateTemplateAlternative() {
            if (!validateForm()) {
                return;
            }
            
            setButtonLoading(true);
            
            // Create a temporary form and submit it
            const form = document.getElementById('editTemplateForm');
            const templateId = document.getElementById('templateId').value;
            
            form.action = `/NotificationTemplate/Edit/${templateId}`;
            form.method = 'post';
            
            // Add a hidden input for the submit type
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'submitType';
            hiddenInput.value = 'update';
            form.appendChild(hiddenInput);
            
            // Submit the form
            form.submit();
        }

        // Event listener for Enter key
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.target.matches('textarea')) {
                e.preventDefault();
                updateTemplate();
            }
        });

        // Confirmation before leaving page if form has changes
        let formChanged = false;
        const formInputs = document.querySelectorAll('#editTemplateForm input, #editTemplateForm select, #editTemplateForm textarea');
        
        formInputs.forEach(input => {
            input.addEventListener('input', function() {
                formChanged = true;
            });
        });

        window.addEventListener('beforeunload', function(e) {
            if (formChanged) {
                e.preventDefault();
                e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
            }
        });

        // Reset form changed flag when successfully submitted
        function resetFormChanged() {
            formChanged = false;
        }
    </script>
}