@model LoanApplicationService.Service.DTOs.CustomerModule.CustomerDto

<div class="row">
    <div class="col-12 col-md-6 mb-3">
        @Html.LabelFor(model => model.FirstName, new { @class = "form-label" })
        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control w-100", @readonly = "readonly" })
    </div>

    <div class="col-12 col-md-6 mb-3">
        @Html.LabelFor(model => model.LastName, new { @class = "form-label" })
        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control w-100", @readonly = "readonly" })
    </div>
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.Email, new { @class = "form-label" })
    @Html.TextBoxFor(model => model.Email, new { @class = "form-control w-100", type = "email" })
    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.PhoneNumber, new { @class = "form-label" })
    @Html.TextBoxFor(model => model.PhoneNumber, new { 
        @class = "form-control w-100", 
        type = "text", 
        pattern = "\\d{10}", 
        maxlength = "10", 
        minlength = "10", 
        title = "Phone number must be exactly 10 digits" 
    })
    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.DateOfBirth, new { @class = "form-label" })
    @Html.TextBoxFor(model => model.DateOfBirth, "{0:yyyy-MM-dd}", new { 
        @class = "form-control w-100", 
        type = "date",
        @readonly = "readonly"
    })
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.NationalId, new { @class = "form-label" })
    @Html.TextBoxFor(model => model.NationalId, new { 
        @class = "form-control w-100", 
        @readonly = "readonly"
    })
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.EmploymentStatus, new { @class = "form-label" })
    <select id="EmploymentStatus" name="EmploymentStatus" class="form-select w-100" required>
        <option value="">-- Select Employment Status --</option>
        <option value="Employed" @(Model.EmploymentStatus == "Employed" ? "selected" : "")>Employed</option>
        <option value="Unemployed" @(Model.EmploymentStatus == "Unemployed" ? "selected" : "")>Unemployed</option>
        <option value="Self-Employed" @(Model.EmploymentStatus == "Self-Employed" ? "selected" : "")>Self-Employed</option>
    </select>
    @Html.ValidationMessageFor(model => model.EmploymentStatus, "", new { @class = "text-danger" })
</div>

<div class="mb-3 w-100">
    @Html.LabelFor(model => model.AnnualIncome, new { @class = "form-label" })
    <div class="input-group w-100">
        <span class="input-group-text">KSh</span>
        @Html.TextBoxFor(model => model.AnnualIncome, new { 
            @class = "form-control", 
            type = "number", 
            step = "0.01", 
            min = "0" 
        })
    </div>
    @Html.ValidationMessageFor(model => model.AnnualIncome, "", new { @class = "text-danger" })
</div>

<div class="mb-3 w-100">
    <label for="NewPassword" class="form-label">New Password (leave blank to keep current)</label>
    <div class="input-group w-100">
        <input id="NewPassword" name="NewPassword" class="form-control" type="password" placeholder="Enter new password" />
        <button type="button" class="btn btn-outline-secondary" tabindex="-1" onclick="togglePasswordVisibility('NewPassword', this)">
            <i class="fas fa-eye"></i>
        </button>
    </div>
</div>

<div class="mb-4 w-100">
    <label for="ConfirmNewPassword" class="form-label">Confirm New Password</label>
    <div class="input-group w-100">
        <input id="ConfirmNewPassword" name="ConfirmNewPassword" class="form-control" type="password" placeholder="Confirm new password" />
        <button type="button" class="btn btn-outline-secondary" tabindex="-1" onclick="togglePasswordVisibility('ConfirmNewPassword', this)">
            <i class="fas fa-eye"></i>
        </button>
    </div>
    <span id="password-match-error" class="text-danger" style="display:none;"></span>
</div>

@Html.HiddenFor(model => model.CustomerId)

<script>
function togglePasswordVisibility(inputId, btn) {
    var input = document.getElementById(inputId);
    var icon = btn.querySelector('i');
    if (input.type === "password") {
        input.type = "text";
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
    } else {
        input.type = "password";
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
    }
}

document.addEventListener('DOMContentLoaded', function() {
    var newPassword = document.getElementById('NewPassword');
    var confirmPassword = document.getElementById('ConfirmNewPassword');
    var errorElement = document.getElementById('password-match-error');
    
    function validatePasswords() {
        if (newPassword.value || confirmPassword.value) {
            if (newPassword.value !== confirmPassword.value) {
                errorElement.textContent = 'Passwords do not match';
                errorElement.style.display = 'block';
                return false;
            } else {
                errorElement.style.display = 'none';
                return true;
            }
        }
        errorElement.style.display = 'none';
        return true;
    }
    
    if (newPassword) newPassword.addEventListener('input', validatePasswords);
    if (confirmPassword) confirmPassword.addEventListener('input', validatePasswords);
    
    var form = document.querySelector('form');
    if (form) {
        form.addEventListener('submit', function(e) {
            if (!validatePasswords()) {
                e.preventDefault();
            }
        });
    }
});
</script>